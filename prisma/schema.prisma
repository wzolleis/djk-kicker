// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-1.0.x"]
}

// provider = "mysql"
// provider = "sqlite"
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  admin    Boolean   @default(false)
  testUser Boolean   @default(false)
}

model Game {
  id       String       @id @default(cuid())
  gameTime DateTime     @default(now())
  name     String
  link     String?
  spielort String       @default("0")
  feedback Feedback[]
  token    String       @unique @default(cuid())
  action   GameAction[]
  status   String? // findet statt oder abgesagt
}

model GameAction {
  id         String   @id @default(cuid())
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId     String
  actionType String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  mail       Mail[] // die Mails, die fuer dieses Spiel veschickt wurden
  status     Int? // Mail erfolgreich geschickt (200) bzw. kann nicht verschickt werden (400) oder Error (500)
  statusTxt  String? // Fehlermeldung
}

model Mail {
  id        String     @id @default(cuid())
  action    GameAction @relation(fields: [actionId], references: [id], onDelete: Cascade)
  actionId  String
  player    Player     @relation(fields: [playerId], references: [id])
  playerId  String
  status    Int? // Mail erfolgreich geschickt (200) bzw. kann nicht verschickt werden (400) oder Error (500)
  statusTxt String? // Fehlermeldung
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  mailType  String? // Einladungslink, Zusage, Absage,...
}

// Feedback der Spieler f√ºr ein Spiel
model Feedback {
  id              String  @id @default(cuid())
  game            Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId          String
  player          Player  @relation(fields: [playerId], references: [id])
  playerId        String
  status          Int?    @default(0)
  playerCount     Int     @default(1)
  note            String?
  invitationToken String @default("")

  @@unique([playerId, gameId])
}

model Player {
  id              String            @id @default(cuid())
  name            String
  email           String
  feedback        Feedback[]
  mails           Mail[]
  DefaultFeedback DefaultFeedback[]
}

model DefaultFeedback {
  id          String @id @default(cuid())
  playerId    String @unique
  player      Player @relation(fields: [playerId], references: [id])
  status      Int    @default(0)
  playerCount Int    @default(1)
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model AdminInvitation {
  id                    String   @id @default(cuid())
  name                  String
  token                 String
  email                 String
  scope                 String
  expires_at            DateTime
  status                Int?
  mailStatus            Int?
  invitationStatus     String?
}
