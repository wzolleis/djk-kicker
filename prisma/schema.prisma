// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-1.0.x"]
}

// provider = "mysql"
// provider = "sqlite"
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  admin    Boolean   @default(false)
  testUser Boolean   @default(false)
  securityCode String?
}

model Game {
  id       String       @id @default(cuid())
  gameTime DateTime     @default(now())
  name     String
  link     String?
  spielort String       @default("0")
  feedback Feedback[]
  token    String       @unique @default(cuid())
  status   String?     // Zusage oder Absage
  banner   String?     // beliebiger Text
}

// Feedback der Spieler für ein Spiel
model Feedback {
  id              String  @id @default(cuid())
  game            Game    @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  gameId          String
  player          Player  @relation(fields: [playerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playerId        String
  status          Int    @default(0)
  playerCount     Int     @default(0)
  note            String?

  @@unique([playerId, gameId])
}

model Player {
  id              String            @id @default(cuid())
  name            String
  email           String             @unique
  feedback        Feedback[]
  DefaultFeedback DefaultFeedback[]
  Token           Token[]
  isActive        Boolean? @default(true)
}

model DefaultFeedback {
  id          String @id @default(cuid())
  playerId    String @unique
  player      Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  status      Int    @default(0)
  note String?
  playerCount Int    @default(0)
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model AdminInvitation {
  id                    String   @id @default(cuid())
  name                  String
  token                 String
  email                 String
  scope                 String
  expires_at            DateTime
  status                Int?
  invitationStatus     String?
}


model Token {
id String @id @default(uuid())
player Player @relation(fields: [playerId], references: [id],  onDelete: Cascade)
playerId String @unique
revoked Boolean @default(false)
expirationDate DateTime
}

model Session {
id String @id @default(cuid())
data String @db.VarChar(5000)
}

model MailServiceRequest {
    id              String   @id @default(cuid())
    requestId       String  // Die ID des Requests, damit kann man den Status erneut abfragen
    gameId          String?   // Die ID des Spieles fuer das der Request gesendet wurde
    requestType     String?   // Der Typ des Requests (z.B. Einladung, zusage, absage,testmail)
    requestPayload  String?   @db.VarChar(50000) // die Daten fuer den Request, nützlich falls Fehler auftreten
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
}

model PlayerRating {
    id              String      @id             @default(cuid())
    playerId        String?
    playerName      String
    technik         Int                         @default(0)
    speed           Int                         @default(0)
    condition       Int                         @default(0)
    createdAt       DateTime                    @default(now())
    updatedAt       DateTime                    @updatedAt
}
